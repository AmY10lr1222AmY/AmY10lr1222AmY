{"ast":null,"code":"// the service folder will save the information regarding the Apis\n// we will use the axios\n\nimport axios from 'axios';\nimport API_NOTIFICATIONS_MSG, { SERVICE_URLS } from '../constants/config.js';\nconst API_URL = 'https://localhost:8000'; //our backend is running at this port\n\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  //stop global loader here \n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = () => {\n  var _response;\n  if (((_response = response) === null || _response === void 0 ? void 0 : _response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    var _response2, _response3, _response4;\n    return {\n      isFailure: true,\n      status: (_response2 = response) === null || _response2 === void 0 ? void 0 : _response2.status,\n      msg: (_response3 = response) === null || _response3 === void 0 ? void 0 : _response3.msg,\n      code: (_response4 = response) === null || _response4 === void 0 ? void 0 : _response4.code\n    };\n  }\n};\nconst processError = () => {\n  if (error.response) {\n    // request has been sent to server but the server respoded woth different status code\n    // that falls out of the range \n    console.log(\"Error in Respnse\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.responseFailure,\n      code: \"\"\n    };\n  } else if (error.request) {\n    //  request has been made but no response received\n    console.log(\"Error in Request:\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.requestFaiure,\n      code: \"\"\n    };\n  } else {\n    //  something happened to the setting up request \n    console.log(\"ERROR in NETWOR:\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.networkError,\n      code: \"\"\n    };\n  }\n};\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgresss) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: body,\n    responseType: value.responseType,\n    onUploadProgress: function (ProgressEvent) {\n      if (showUploadProgress) {\n        let percentageCompleted = Math.round(ProgressEvent.loaded * 100 / ProgressEvent.total);\n        showUploadProgress(percentageCompleted);\n      }\n    },\n    onDownloadProgress: function (ProgressEvent) {\n      if (showDownloadProgresss) {\n        let percentageCompleted = Math.round(ProgressEvent.loaded * 100 / ProgressEvent.total);\n        showDownloadProgresss(percentageCompleted);\n      }\n    }\n  });\n}\nexport default {\n  API\n};","map":{"version":3,"names":["axios","API_NOTIFICATIONS_MSG","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","processError","_response","status","isSuccess","data","_response2","_response3","_response4","isFailure","msg","code","console","log","toJSON","isError","responseFailure","requestFaiure","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgresss","method","url","responseType","onUploadProgress","ProgressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["D:/Web Development/BLOG/client/src/service/api.js"],"sourcesContent":["// the service folder will save the information regarding the Apis\r\n// we will use the axios\r\n\r\nimport axios from 'axios';\r\n\r\nimport API_NOTIFICATIONS_MSG, { SERVICE_URLS } from '../constants/config.js';\r\n\r\n\r\nconst API_URL = 'https://localhost:8000'; //our backend is running at this port\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 10000,\r\n    headers:{\r\n        \"Content-Type\": \"application/json\"\r\n    }\r\n})\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config){\r\n        return config;\r\n\r\n    },\r\n    function(error){\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n\r\naxiosInstance.interceptors.response.use(\r\n    function (response){\r\n        //stop global loader here \r\n        return processResponse(response);\r\n    },\r\n    function(error){\r\n        return Promise.reject(processError(error));\r\n    }\r\n\r\n)\r\n\r\n\r\nconst processResponse = () =>{\r\n    if(response?.status===200){\r\n        return {isSuccess:true,data: response.data}\r\n\r\n    }else {\r\n        return {\r\n            isFailure: true,\r\n            status: response?.status,\r\n            msg: response?.msg,\r\n            code: response?.code\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nconst processError = () =>{\r\n    if(error.response){\r\n        // request has been sent to server but the server respoded woth different status code\r\n        // that falls out of the range \r\n        console.log(\"Error in Respnse\", error.toJSON());\r\n        return {\r\n            isError:true,\r\n            msg: API_NOTIFICATIONS_MSG.responseFailure,\r\n            code: \"\"\r\n        }\r\n\r\n    } else if(error.request){\r\n        //  request has been made but no response received\r\n        console.log(\"Error in Request:\", error.toJSON())\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATIONS_MSG.requestFaiure,\r\n\r\n            code: \"\"\r\n        }\r\n    }\r\n    else{\r\n        //  something happened to the setting up request \r\n        console.log(\"ERROR in NETWOR:\",error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATIONS_MSG.networkError,\r\n            code: \"\"\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst API = {};\r\n\r\nfor (const [key,value]of Object.entries(SERVICE_URLS)) {\r\n    API[key] = (body,showUploadProgress, showDownloadProgresss)=>\r\n        axiosInstance({\r\n            method: value.method,\r\n            url: value.url,\r\n            data: body,\r\n            responseType: value.responseType,\r\n            onUploadProgress: function (ProgressEvent) {\r\n                if(showUploadProgress){\r\n                    let percentageCompleted = Math.round((ProgressEvent.loaded*100)/ProgressEvent.total)\r\n                    showUploadProgress(percentageCompleted);\r\n                }\r\n            },\r\n            onDownloadProgress: function(ProgressEvent) {\r\n                if(showDownloadProgresss) {\r\n                    let percentageCompleted = Math.round((ProgressEvent.loaded*100) / ProgressEvent.total)\r\n                    showDownloadProgresss(percentageCompleted);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\nexport default {API};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}